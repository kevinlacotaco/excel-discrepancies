{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["extractName","rowData","result","exec","trim","App","useState","qb","setQB","srs","setSRS","useEffect","missingQB","filter","person","find","p","name","includes","missingSRS","sameNameDiffTotal","map","qbPerson","total","qbTotal","srsTotal","Boolean","workbook","XLSX","utils","book_new","missingQBSheet","json_to_sheet","missingSRSSheet","sameNameDiffTotalSheet","SheetNames","Sheets","writeFile","compareSheets","className","htmlFor","id","type","accept","onChange","data","files","target","reader","FileReader","addEventListener","load","Uint8Array","read","parsed","sheet_to_json","Sheet1","pop","srsPerson","readAsArrayBuffer","TOTAL","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.379812e7.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport XLSX from \"xlsx\";\n\nimport \"./App.css\";\n\nconst extractName = (rowData) => {\n  const result = /(\\w+(?:,)? \\w+).*/.exec(rowData);\n  if (result) {\n    return result[1].trim();\n  }\n};\n\nconst compareSheets = (qb, srs) => {\n  const missingQB = srs.filter((person) => {\n    return !qb.find((p) => {\n      return p.name != null && person.name.includes(p.name);\n    });\n  });\n\n  const missingSRS = qb.filter((person) => {\n    return !srs.find((p) => {\n      return p.name != null && person.name.includes(p.name);\n    });\n  });\n\n  const sameNameDiffTotal = srs\n    .map((person) => {\n      const qbPerson = qb.find((p) => {\n        return p.name != null && person.name.includes(p.name.trim());\n      });\n\n      if (qbPerson && qbPerson.total !== person.total) {\n        return {\n          name: person.name,\n          qbTotal: qbPerson.total,\n          srsTotal: person.total,\n        };\n      } else if (qbPerson && qbPerson.total === person.total) {\n        //console.log(\"Same\", qbPerson.total);\n      }\n\n      return null;\n    })\n    .filter(Boolean);\n\n  const workbook = XLSX.utils.book_new();\n\n  const missingQBSheet = XLSX.utils.json_to_sheet(missingQB);\n  const missingSRSSheet = XLSX.utils.json_to_sheet(missingSRS);\n  const sameNameDiffTotalSheet = XLSX.utils.json_to_sheet(sameNameDiffTotal);\n\n  workbook.SheetNames = [\n    \"Missing in QB\",\n    \"Missing in SRS\",\n    \"Same Name Different Total\",\n  ];\n  workbook.Sheets[\"Missing in QB\"] = missingQBSheet;\n  workbook.Sheets[\"Missing in SRS\"] = missingSRSSheet;\n  workbook.Sheets[\"Same Name Different Total\"] = sameNameDiffTotalSheet;\n\n  XLSX.writeFile(workbook, \"out.xls\");\n};\n\nfunction App() {\n  const [qb, setQB] = useState(null);\n  const [srs, setSRS] = useState(null);\n\n  const parseQBInput = (data) => {\n    const files = data.target.files;\n    const reader = new FileReader();\n\n    reader.addEventListener(\"load\", (load) => {\n      const data = new Uint8Array(load.target.result);\n      const workbook = XLSX.read(data, { type: \"array\" });\n\n      const parsed = XLSX.utils\n        .sheet_to_json(workbook.Sheets.Sheet1)\n        .map((qbPerson) => {\n          return {\n            name: extractName(qbPerson[\"__EMPTY_1\"]),\n            total: qbPerson.TOTAL,\n          };\n        })\n        .filter((p) => p.name != null);\n\n      setQB(parsed);\n    });\n\n    reader.readAsArrayBuffer(files[0]);\n  };\n\n  const parseSRSInput = (data) => {\n    const files = data.target.files;\n    const reader = new FileReader();\n\n    reader.addEventListener(\"load\", (load) => {\n      const data = new Uint8Array(load.target.result);\n      const workbook = XLSX.read(data, { type: \"array\" });\n\n      const parsed = XLSX.utils.sheet_to_json(workbook.Sheets.Sheet1);\n\n      parsed.pop();\n\n      setSRS(\n        parsed.map((srsPerson) => {\n          return {\n            name: srsPerson[\"Deceased Name\"].trim(),\n            total: srsPerson[\"Total Due\"],\n          };\n        })\n      );\n    });\n\n    reader.readAsArrayBuffer(files[0]);\n  };\n\n  useEffect(() => {\n    if (qb && srs) {\n      compareSheets(qb, srs);\n    }\n  });\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <h1>Difference Finder</h1>\n      </header>\n      <div className=\"field\">\n        <label className=\"cursor-pointer label-button\" htmlFor=\"srs-input\">\n          Select SRS Report\n          <input\n            id=\"srs-input\"\n            type=\"file\"\n            accept=\"application/vnd.ms-excel, application/vnd.openxmlformats-officedocument.spreadsheetml.sheet\"\n            className=\"file-hidden\"\n            onChange={parseSRSInput}\n          ></input>\n        </label>\n      </div>\n      <div className=\"field\">\n        <label className=\"cursor-pointer label-button\" htmlFor=\"qb-input\">\n          Select QB Report\n          <input\n            id=\"qb-input\"\n            type=\"file\"\n            accept=\"application/vnd.ms-excel, application/vnd.openxmlformats-officedocument.spreadsheetml.sheet\"\n            className=\"file-hidden\"\n            onChange={parseQBInput}\n          ></input>\n        </label>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}